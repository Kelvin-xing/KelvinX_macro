function [grid_lambda, P] = tauchen_hussey(rho, mu_lambda, sigma_lambda, mu_epsilon, sigma_epsilon, n, tauchenhusseyoptions)
    % Given parameters of a Normal distribution AR(1) process, produce a
    % grid with size n, and corresponding transition matrix P according to
    % Tauchen-Hussey 1991's method, following Kopecky(2007)'s lecture note
    
    %% Set default for baseSigma following Floden's suggestion (see above)
    if ~exist('tauchenhusseyoptions','var')
        w=0.5+rho/4;
        sigmaZ=sigma/sqrt(1-rho^2);
        baseSigma=w*sigma+(1-w)*sigma*sigmaZ;
    else
        if ~isfield(tauchenhusseyoptions,'baseSigma')
            w=0.5+rho/4;
            sigmaZ=sigma/sqrt(1-rho^2);
            baseSigma=w*sigma+(1-w)*sigma*sigmaZ;
        else
            baseSigma=tauchenhusseyoptions.baseSigma;
        end
    end

    
    % Root finding of nth Hermite polynomial for grid 
    [lambda_hat, weights] = GaussHermite_2(n);
    grid_lambda = sqrt(2) * baseSigma * lambda_hat + mu_lambda;
    
    % Weights
    [wtilda, P, f, f_mu] = deal(ones(n));
    for i = 1:n
        for j = 1:n
            mean = rho * grid_lambda(i);            % Conditional mean
            %%%%% given we are at node(i), what is likelihood of node(j)?
            f(i,j)  = normpdf(grid_lambda(j),mean,sigma_epsilon); 
            %%%%% given we are at mu_lambda, what is likelihood of node(j)?
            f_mu(i,j)  = normpdf(mu_lambda,mean,sigma_epsilon); 
            wtilda(i,j) = 1 / sqrt(pi) * weights(j) * f(i,j) / f_mu(i,j);
        end
    end
    
    % Transition matrix
    normalizer = sum(wtilda, 2);
    for i = 1:n
        for j = 1:n
            P(i,j) = wtilda(i,j) / normalizer(i);
        end
    end

end

function [x,w] = gaussnorm(n,mu,s2)
% Find Gaussian nodes and weights for the normal distribution
% n  = # nodes
% mu = mean
% s2 = variance
[x0,w0] = gausshermite(n);
x = x0*sqrt(2*s2) + mu;
w = w0 / sqrt(pi);
end

function [x,w] = gausshermite(n)
% Gauss Hermite nodes and weights following "Numerical Recipes for C"

MAXIT = 10;
EPS   = 3e-14;
PIM4  = 0.7511255444649425;

x = zeros(n,1);
w = zeros(n,1);

m = floor(n+1)/2;
for i=1:m
    if i == 1
        z = sqrt((2*n+1)-1.85575*(2*n+1)^(-0.16667));
    elseif i == 2
        z = z - 1.14*(n^0.426)/z;
    elseif i == 3
        z = 1.86*z - 0.86*x(1);
    elseif i == 4
        z = 1.91*z - 0.91*x(2);
    else
        z = 2*z - x(i-2);
    end
    
    for iter = 1:MAXIT
        p1 = PIM4;
        p2 = 0;
        for j=1:n
            p3 = p2;
            p2 = p1;
            p1 = z*sqrt(2/j)*p2 - sqrt((j-1)/j)*p3;
        end
        pp = sqrt(2*n)*p2;
        z1 = z;
        z = z1 - p1/pp;
        if abs(z-z1) <= EPS
            break
        end
    end
    if iter>MAXIT
        error('too many iterations')
    end
    x(i)     = z;
    x(n+1-i) = -z;
    w(i)     = 2/pp/pp;
    w(n+1-i) = w(i);
end
x(:) = x(end:-1:1);
end

% Note 1: If you have Miranda and Fackler's CompEcon toolbox you can use
% their qnwnorm function to obtain quadrature nodes and weights for the
% normal function: [Z,w] = qnwnorm(N,mu,baseSigma^2);
% Compecon is available at http://www4.ncsu.edu/~pfackler/compecon/
% Otherwise, use gaussnorm as here.